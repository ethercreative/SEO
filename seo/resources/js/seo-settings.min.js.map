{"version":3,"file":"seo-settings.min.js","sources":["../../../resources/js/Helpers.js","../../../resources/js/Redirects.js","../../../resources/js/seo-settings.js"],"sourcesContent":["/**\n * ## Create Element\n * Quick and easy DOM element creation\n *\n * @param {string=} tag - The element tag\n * @param {object=} attributes - The attributes to add, mapping the key as\n *     the attribute name, and the value as its value. If the value is a\n *     function, it will be added as an event.\n * @param {(Array|*)=} children - An array of children (can be a mixture of\n *     Nodes to append, or other values to be stringified and appended\n *     as text).\n * @return {Element} - The created element\n */\nexport function createElement (\n    tag = \"div\",\n    attributes = {},\n    children = []\n) {\n    const elem = document.createElement(tag);\n    \n    for (let [key, value] of Object.entries(attributes)) {\n        if (typeof value === typeof (() => {})) {\n            elem.addEventListener(key, value);\n            continue;\n        }\n        \n        elem.setAttribute(key, value);\n    }\n    \n    if (!Array.isArray(children))\n        children = [children];\n    \n    children.map(child => {\n        try {\n            elem.appendChild(child);\n        } catch (_) {\n            elem.appendChild(document.createTextNode(child));\n        }\n    });\n    \n    return elem;\n}","/* globals Craft */\n\nimport { createElement } from \"./Helpers\";\n\nconst REDIRECT_TYPES = {\n    \"301\": \"301 (Permanent)\",\n    \"302\": \"302 (Temporary)\",\n};\n\nexport default class Redirects {\n    \n    constructor (namespace, csrf) {\n        this.ns = namespace;\n        this.csrf = csrf;\n        \n        this.table = document.getElementById(namespace + \"-redirectTable\");\n        this.tableForm = document.getElementById(namespace + \"-tableForm\");\n        this.newForm = document.getElementById(namespace + \"-redirectsNew\");\n        this.bulkForm = document.getElementById(namespace + \"-redirectsBulk\");\n        \n        this.cancelCurrentEdit = () => {};\n        this.editRow = null;\n        \n        this.tableForm.addEventListener(\"submit\", this.onUpdate);\n        this.newForm.addEventListener(\"submit\", this.onSubmitNew);\n        this.bulkForm.addEventListener(\"submit\", this.onSubmitBulk);\n        \n        this.initTable();\n    }\n    \n    initTable () {\n        [].slice.call(this.table.getElementsByTagName(\"tr\")).forEach(row => {\n            const links = row.getElementsByTagName(\"a\");\n            \n            row.addEventListener(\"click\", e => {\n                this.onEditClick(e, row);\n            });\n            \n            links[1].addEventListener(\"click\", e => {\n                this.onDeleteClick(e, row);\n            });\n        });\n    }\n    \n    // Events\n    // =========================================================================\n    \n    onSubmitNew = e => {\n        e.preventDefault();\n        const form = e.target\n            , spinner = form.getElementsByClassName(\"spinner\")[0];\n        \n        const uri  = form.elements[this.namespaceField(\"uri\")]\n            , to   = form.elements[this.namespaceField(\"to\")]\n            , type = form.elements[this.namespaceField(\"type\")];\n        \n        // Validate\n        let valid = true;\n        if (uri.value.trim() === \"\") {\n            uri.classList.add(\"error\");\n            valid = false;\n        } else uri.classList.remove(\"error\");\n        \n        if (to.value.trim() === \"\") {\n            to.classList.add(\"error\");\n            valid = false;\n        } else to.classList.remove(\"error\");\n        \n        if (!valid) return;\n        \n        // Submit\n        spinner.classList.remove(\"hidden\");\n        \n        this.post(\"addRedirect\", {\n            uri: uri.value,\n            to: to.value,\n            type: type.value,\n        }, ({ id }) => {\n            this.table.appendChild(this.rowStatic(\n                id, uri.value, to.value, type.value\n            ));\n            \n            Craft.cp.displayNotice('<strong>SEO:</strong> Redirect added successfully!');\n            spinner.classList.add(\"hidden\");\n            \n            form.reset();\n            uri.focus();\n        }, error => {\n            Craft.cp.displayError('<strong>SEO:</strong> ' + error);\n            spinner.classList.add(\"hidden\");\n        });\n    };\n    \n    onSubmitBulk = e => {\n        e.preventDefault();\n        const form = e.target\n            , spinner = form.getElementsByClassName(\"spinner\")[0];\n        \n        const redirects = form.elements[this.namespaceField(\"redirects\")]\n            , separator = form.elements[this.namespaceField(\"separator\")]\n            , type      = form.elements[this.namespaceField(\"type\")];\n        \n        // Validate\n        let valid = true;\n        if (redirects.value.trim() === \"\") {\n            redirects.classList.add(\"error\");\n            valid = false;\n        } else redirects.classList.remove(\"error\");\n        \n        if (separator.value === \"\") {\n            separator.classList.add(\"error\");\n            valid = false;\n        } else separator.classList.remove(\"error\");\n        \n        if (!valid) return;\n        \n        // Submit\n        spinner.classList.remove(\"hidden\");\n        \n        this.post(\"bulkAddRedirects\", {\n            redirects: redirects.value,\n            separator: separator.value,\n            type: type.value,\n        }, ({ redirects }) => {\n            redirects.forEach(({ id, uri, to, type }) => {\n                this.table.appendChild(this.rowStatic(\n                    id, uri, to, type\n                ));\n            });\n            \n            Craft.cp.displayNotice('<strong>SEO:</strong> Redirects added successfully!');\n            spinner.classList.add(\"hidden\");\n            \n            form.reset();\n        }, error => {\n            Craft.cp.displayError('<strong>SEO:</strong> ' + error);\n            spinner.classList.add(\"hidden\");\n        });\n    };\n    \n    // TODO: Remove save / update boilerplate\n    \n    onUpdate = e => {\n        e.preventDefault();\n        const form = e.target\n            , spinner = form.getElementsByClassName(\"spinner\")[0];\n        \n        const id  = form.elements[this.namespaceField(\"id\")]\n            , uri  = form.elements[this.namespaceField(\"uri\")]\n            , to   = form.elements[this.namespaceField(\"to\")]\n            , type = form.elements[this.namespaceField(\"type\")];\n        \n        // Validate\n        let valid = true;\n        if (uri.value.trim() === \"\") {\n            uri.classList.add(\"error\");\n            valid = false;\n        } else uri.classList.remove(\"error\");\n        \n        if (to.value.trim() === \"\") {\n            to.classList.add(\"error\");\n            valid = false;\n        } else to.classList.remove(\"error\");\n        \n        if (!valid) return;\n        \n        // Submit\n        spinner.classList.remove(\"hidden\");\n        \n        this.post(\"updateRedirect\", {\n            id: id.value,\n            uri: uri.value,\n            to: to.value,\n            type: type.value,\n        }, () => {\n            const row = this.editRow;\n            \n            this.cancelCurrentEdit();\n            \n            this.table.insertBefore(\n                this.rowStatic(\n                    id.value, uri.value, to.value, type.value\n                ),\n                row\n            );\n            \n            this.table.removeChild(row);\n        }, error => {\n            Craft.cp.displayError('<strong>SEO:</strong> ' + error);\n            spinner.classList.add(\"hidden\");\n        });\n    };\n    \n    onEditClick = (e, row) => {\n        e.preventDefault();\n        \n        if (e.target.classList.contains(\"delete\")) return;\n        \n        const { id, uri, to, type } = row.dataset;\n        this.cancelCurrentEdit();\n        \n        const editRows = this.rowEdit(id, uri, to, type);\n        \n        this.editRow = row;\n        \n        this.cancelCurrentEdit = () => {\n            this.table.insertBefore(row, editRows[0]);\n            this.table.removeChild(editRows[0]);\n            this.table.removeChild(editRows[1]);\n            \n            this.cancelCurrentEdit = () => {};\n            this.editRow = null;\n        };\n        \n        this.table.insertBefore(\n            editRows[0],\n            row\n        );\n        \n        this.table.insertBefore(\n            editRows[1],\n            row\n        );\n        \n        const focusIndex = e.target.tagName.toLowerCase() === \"a\" ||\n                           e.target.firstElementChild ? 1 : 2;\n        \n        const input = editRows[0].getElementsByTagName(\"input\")[focusIndex];\n        input.focus();\n        setTimeout(() => {\n            input.selectionStart = input.selectionEnd = 10000;\n        }, 0);\n        \n        this.table.removeChild(row);\n    };\n    \n    onDeleteClick = (e, row) => {\n        e.preventDefault();\n        \n        if (!confirm(\"Delete this redirect?\"))\n            return;\n        \n        this.post(\"removeRedirect\", {\n            id: row.dataset.id\n        }, () => {\n            Craft.cp.displayNotice('<strong>SEO:</strong> Redirect deleted');\n            this.table.removeChild(row);\n        }, error => {\n            Craft.cp.displayNotice('<strong>SEO:</strong> ' + error);\n        });\n    };\n    \n    // Helpers\n    // =========================================================================\n    \n    namespaceField (handle) {\n        return `${this.ns}[${handle}]`;\n    }\n    \n    post (\n        action,\n        fields = {},\n        onSuccess = () => {},\n        onError = () => {}\n    ) {\n        const formData = new FormData();\n        \n        formData.append(this.csrf.name, this.csrf.token);\n        formData.append(\"action\", `seo/redirects/${action}`);\n        \n        Object.keys(fields).forEach(key => {\n            if (fields.hasOwnProperty(key))\n                formData.append(key, fields[key]);\n        });\n        \n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', window.location.href, true);\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n        \n        xhr.onload = function() {\n            let data = xhr.responseText;\n            if (xhr.status >= 200 && xhr.status < 400) {\n                data = JSON.parse(data);\n                if (data.hasOwnProperty(\"success\")) {\n                    onSuccess(data);\n                } else if (data.hasOwnProperty(\"error\")) {\n                    if (typeof data.error === typeof \"\") {\n                        onError(data.error);\n                    } else {\n                        onError(data.error[Object.keys(data.error)[0]][0]);\n                    }\n                }\n            } else {\n                onError(data);\n            }\n        };\n        \n        xhr.onerror = function () {\n            onError(\"An unknown error has occurred\");\n        };\n        \n        xhr.send(formData);\n    }\n    \n    rowStatic (id = -1, uri = \"\", to = \"\", type = 301) {\n        const row = createElement(\"tr\", {\n            \"tabindex\": 0,\n            \"data-id\": id,\n            \"data-uri\": uri,\n            \"data-to\": to,\n            \"data-type\": type,\n            \"click\": e => this.onEditClick(e, row)\n        }, [\n            // URI\n            createElement(\"td\", { \"class\": \"redirects--title-col\" }, [\n                createElement(\"div\", { \"class\": \"element small\" }, [\n                    createElement(\"div\", { \"class\": \"label\" }, [\n                        createElement(\"span\", { \"class\": \"title\" }, [\n                            createElement(\"a\", {\n                                \"href\": \"#\",\n                                \"title\": \"Edit Redirect\",\n                                \"click\": e => { e.preventDefault(); }\n                            }, uri)\n                        ])\n                    ])\n                ])\n            ]),\n            \n            // To\n            createElement(\"td\", {}, to),\n            \n            // Type\n            createElement(\"td\", {}, REDIRECT_TYPES[type]),\n            \n            // Delete\n            createElement(\"td\", { \"class\": \"thin action\" }, [\n                createElement(\"a\", {\n                    \"class\": \"delete icon\",\n                    \"title\": \"Delete\",\n                    \"click\": e => this.onDeleteClick(e, row)\n                })\n            ])\n        ]);\n        \n        return row;\n    }\n    \n    rowEdit (id, uri, to, type) {\n        return [\n            createElement(\"tr\", { \"class\": \"redirects--edit-row\" }, [\n                // URI\n                createElement(\"td\", {}, [\n                    createElement(\"input\", {\n                        \"value\": id,\n                        \"type\": \"hidden\",\n                        \"name\": this.namespaceField(\"id\")\n                    }),\n                    createElement(\"input\", {\n                        \"value\": uri,\n                        \"type\": \"text\",\n                        \"class\": \"text fullwidth\",\n                        \"name\": this.namespaceField(\"uri\")\n                    }),\n                ]),\n                \n                // To\n                createElement(\"td\", {}, [\n                    createElement(\"input\", {\n                        \"value\": to,\n                        \"type\": \"text\",\n                        \"class\": \"text fullwidth\",\n                        \"name\": this.namespaceField(\"to\")\n                    }),\n                ]),\n                \n                // Type\n                createElement(\"td\", {}, [\n                    createElement(\"div\", { \"class\": \"select\" }, [\n                        createElement(\"select\", {\n                            \"name\": this.namespaceField(\"type\")\n                        }, Object.keys(REDIRECT_TYPES).map(value => {\n                            const opts = { value };\n                            if (type === value) opts[\"selected\"] = \"selected\";\n                            \n                            return createElement(\"option\", opts, REDIRECT_TYPES[value]);\n                        }))\n                    ])\n                ]),\n                \n                // Spinner\n                createElement(\"td\", {}, [\n                    createElement(\"div\", { \"class\": \"spinner hidden\" })\n                ])\n            ]),\n            \n            createElement(\"tr\", { \"class\": \"redirects--edit-controls\" }, [\n                createElement(\"td\", { \"colspan\": 4 }, [\n                    createElement(\"input\", {\n                        \"class\": \"btn submit\",\n                        \"type\": \"submit\",\n                        \"value\": \"Update\",\n                    }),\n                    createElement(\"input\", {\n                        \"class\": \"btn\",\n                        \"type\": \"button\",\n                        \"value\": \"Cancel\",\n                        \"click\": () => { this.cancelCurrentEdit(); },\n                    }),\n                ])\n            ])\n        ];\n    }\n    \n}","import Redirects from \"./Redirects\";\n\nconst SeoSettings = function (namespace, run, csrf) {\n    this.namespace = namespace;\n    this.csrf = {\n        name: csrf[0],\n        token: csrf[1],\n    };\n\n    switch (run) {\n        case 'sitemap':\n            new SeoSettings.EditableTable(this.namespace + '-customUrls', this.namespace + '-addCustomUrl');\n            break;\n        case 'redirects':\n            this.redirectsForm();\n            break;\n        case 'settings':\n            this.sitemapName();\n            break;\n    }\n};\n\n// Sitemap\n// =============================================================================\nSeoSettings.prototype.sitemapName = function () {\n    const example = document.getElementById(this.namespace + '-sitemapNameExample');\n    document.getElementById(this.namespace + '-sitemapName').addEventListener('input', function () {\n        example.textContent = this.value + '.xml';\n    });\n};\n\n// Redirects\n// =============================================================================\nSeoSettings.prototype.redirectsForm = function () {\n    new Redirects(this.namespace, this.csrf);\n};\n\n// Helpers\n// =============================================================================\nSeoSettings.EditableTable = function (tableId, addButtonId, rowCb) {\n    this.rowCb = (typeof rowCb === \"function\" ? rowCb : function () {});\n    this.table = document.getElementById(tableId).getElementsByTagName('tbody')[0];\n    this.row = this.table.firstElementChild.cloneNode(true);\n    this.table.firstElementChild.remove();\n\n    this.row.classList.remove('hidden');\n\n    [].slice.call(this.table.getElementsByClassName('delete')).forEach((el) => {\n        el.addEventListener('click', () => {\n            el.parentNode.parentNode.remove();\n            this.rowCb();\n        });\n    });\n\n    document.getElementById(addButtonId).addEventListener('click', () => {\n        this.addRow();\n    });\n};\n\nSeoSettings.EditableTable.prototype.addRow = function () {\n    const newRow = this.row.cloneNode(true);\n\n    newRow.innerHTML = newRow.innerHTML.replace(/{i}/g, this.table.childNodes.length - 2);\n\n    newRow.getElementsByClassName('delete')[0].addEventListener('click', () => {\n        newRow.remove();\n        this.rowCb();\n    });\n\n    this.table.appendChild(newRow);\n\n    this.rowCb();\n};"],"names":["createElement","tag","attributes","children","elem","document","Object","entries","key","value","setAttribute","addEventListener","Array","isArray","map","appendChild","child","_","createTextNode","REDIRECT_TYPES","Redirects","namespace","csrf","onSubmitNew","preventDefault","form","e","target","spinner","getElementsByClassName","uri","elements","_this","namespaceField","to","type","valid","trim","classList","add","remove","post","id","table","rowStatic","cp","displayNotice","reset","focus","displayError","error","onSubmitBulk","redirects","separator","forEach","onUpdate","row","editRow","cancelCurrentEdit","insertBefore","removeChild","onEditClick","contains","dataset","editRows","rowEdit","focusIndex","tagName","toLowerCase","firstElementChild","input","getElementsByTagName","selectionStart","selectionEnd","onDeleteClick","confirm","ns","getElementById","tableForm","newForm","bulkForm","this","initTable","slice","call","links","handle","action","fields","onSuccess","onError","formData","FormData","append","name","token","keys","hasOwnProperty","xhr","XMLHttpRequest","open","window","location","href","setRequestHeader","onload","data","responseText","status","JSON","parse","babelHelpers.typeof","onerror","send","_this3","class","opts","colspan","SeoSettings","run","EditableTable","redirectsForm","sitemapName","prototype","example","textContent","tableId","addButtonId","rowCb","cloneNode","el","parentNode","addRow","newRow","innerHTML","replace","childNodes","length"],"mappings":"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"}